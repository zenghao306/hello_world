// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gateway2app.proto

/*
Package external is a generated protocol buffer package.

It is generated from these files:
	gateway2app.proto

It has these top-level messages:
	LoginReq
	IndexReq
	AppDetailReq
	UserInfo
	LoginRes
	RegisterReq
	ReturnRes
	QianxunReq
	TokenReq
	TelReq
	TokenRes
	RankingInfoRes
	AppListRes
	AppDetailInfoRes
	MinePoolRes
	MinePoolTaskListRes
*/
package external

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserServceRpc service

type UserServceRpcService interface {
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRes, error)
	Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*ReturnRes, error)
	ModifyPwdByTel(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*ReturnRes, error)
	AddQianXunCode(ctx context.Context, in *QianxunReq, opts ...client.CallOption) (*ReturnRes, error)
	QianXunSnsVerify(ctx context.Context, in *QianxunReq, opts ...client.CallOption) (*ReturnRes, error)
	SetUserToken(ctx context.Context, in *TokenReq, opts ...client.CallOption) (*ReturnRes, error)
	GetUserToken(ctx context.Context, in *TelReq, opts ...client.CallOption) (*TokenRes, error)
	GetUserRankingInfo(ctx context.Context, in *TelReq, opts ...client.CallOption) (*RankingInfoRes, error)
	GetUseRankingHdtDig(ctx context.Context, in *TelReq, opts ...client.CallOption) (*RankingInfoRes, error)
	AppList(ctx context.Context, in *IndexReq, opts ...client.CallOption) (*AppListRes, error)
	AppDetailInfo(ctx context.Context, in *AppDetailReq, opts ...client.CallOption) (*AppDetailInfoRes, error)
	GetMinePoolInfo(ctx context.Context, in *TelReq, opts ...client.CallOption) (*MinePoolRes, error)
	GetMinePoolTaskList(ctx context.Context, in *TokenReq, opts ...client.CallOption) (*MinePoolTaskListRes, error)
}

type userServceRpcService struct {
	c    client.Client
	name string
}

func NewUserServceRpcService(name string, c client.Client) UserServceRpcService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "external"
	}
	return &userServceRpcService{
		c:    c,
		name: name,
	}
}

func (c *userServceRpcService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRes, error) {
	req := c.c.NewRequest(c.name, "UserServceRpc.Login", in)
	out := new(LoginRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServceRpcService) Register(ctx context.Context, in *RegisterReq, opts ...client.CallOption) (*ReturnRes, error) {
	req := c.c.NewRequest(c.name, "UserServceRpc.Register", in)
	out := new(ReturnRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServceRpcService) ModifyPwdByTel(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*ReturnRes, error) {
	req := c.c.NewRequest(c.name, "UserServceRpc.ModifyPwdByTel", in)
	out := new(ReturnRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServceRpcService) AddQianXunCode(ctx context.Context, in *QianxunReq, opts ...client.CallOption) (*ReturnRes, error) {
	req := c.c.NewRequest(c.name, "UserServceRpc.AddQianXunCode", in)
	out := new(ReturnRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServceRpcService) QianXunSnsVerify(ctx context.Context, in *QianxunReq, opts ...client.CallOption) (*ReturnRes, error) {
	req := c.c.NewRequest(c.name, "UserServceRpc.QianXunSnsVerify", in)
	out := new(ReturnRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServceRpcService) SetUserToken(ctx context.Context, in *TokenReq, opts ...client.CallOption) (*ReturnRes, error) {
	req := c.c.NewRequest(c.name, "UserServceRpc.SetUserToken", in)
	out := new(ReturnRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServceRpcService) GetUserToken(ctx context.Context, in *TelReq, opts ...client.CallOption) (*TokenRes, error) {
	req := c.c.NewRequest(c.name, "UserServceRpc.GetUserToken", in)
	out := new(TokenRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServceRpcService) GetUserRankingInfo(ctx context.Context, in *TelReq, opts ...client.CallOption) (*RankingInfoRes, error) {
	req := c.c.NewRequest(c.name, "UserServceRpc.GetUserRankingInfo", in)
	out := new(RankingInfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServceRpcService) GetUseRankingHdtDig(ctx context.Context, in *TelReq, opts ...client.CallOption) (*RankingInfoRes, error) {
	req := c.c.NewRequest(c.name, "UserServceRpc.GetUseRankingHdtDig", in)
	out := new(RankingInfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServceRpcService) AppList(ctx context.Context, in *IndexReq, opts ...client.CallOption) (*AppListRes, error) {
	req := c.c.NewRequest(c.name, "UserServceRpc.AppList", in)
	out := new(AppListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServceRpcService) AppDetailInfo(ctx context.Context, in *AppDetailReq, opts ...client.CallOption) (*AppDetailInfoRes, error) {
	req := c.c.NewRequest(c.name, "UserServceRpc.AppDetailInfo", in)
	out := new(AppDetailInfoRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServceRpcService) GetMinePoolInfo(ctx context.Context, in *TelReq, opts ...client.CallOption) (*MinePoolRes, error) {
	req := c.c.NewRequest(c.name, "UserServceRpc.GetMinePoolInfo", in)
	out := new(MinePoolRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServceRpcService) GetMinePoolTaskList(ctx context.Context, in *TokenReq, opts ...client.CallOption) (*MinePoolTaskListRes, error) {
	req := c.c.NewRequest(c.name, "UserServceRpc.GetMinePoolTaskList", in)
	out := new(MinePoolTaskListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserServceRpc service

type UserServceRpcHandler interface {
	Login(context.Context, *LoginReq, *LoginRes) error
	Register(context.Context, *RegisterReq, *ReturnRes) error
	ModifyPwdByTel(context.Context, *LoginReq, *ReturnRes) error
	AddQianXunCode(context.Context, *QianxunReq, *ReturnRes) error
	QianXunSnsVerify(context.Context, *QianxunReq, *ReturnRes) error
	SetUserToken(context.Context, *TokenReq, *ReturnRes) error
	GetUserToken(context.Context, *TelReq, *TokenRes) error
	GetUserRankingInfo(context.Context, *TelReq, *RankingInfoRes) error
	GetUseRankingHdtDig(context.Context, *TelReq, *RankingInfoRes) error
	AppList(context.Context, *IndexReq, *AppListRes) error
	AppDetailInfo(context.Context, *AppDetailReq, *AppDetailInfoRes) error
	GetMinePoolInfo(context.Context, *TelReq, *MinePoolRes) error
	GetMinePoolTaskList(context.Context, *TokenReq, *MinePoolTaskListRes) error
}

func RegisterUserServceRpcHandler(s server.Server, hdlr UserServceRpcHandler, opts ...server.HandlerOption) {
	type userServceRpc interface {
		Login(ctx context.Context, in *LoginReq, out *LoginRes) error
		Register(ctx context.Context, in *RegisterReq, out *ReturnRes) error
		ModifyPwdByTel(ctx context.Context, in *LoginReq, out *ReturnRes) error
		AddQianXunCode(ctx context.Context, in *QianxunReq, out *ReturnRes) error
		QianXunSnsVerify(ctx context.Context, in *QianxunReq, out *ReturnRes) error
		SetUserToken(ctx context.Context, in *TokenReq, out *ReturnRes) error
		GetUserToken(ctx context.Context, in *TelReq, out *TokenRes) error
		GetUserRankingInfo(ctx context.Context, in *TelReq, out *RankingInfoRes) error
		GetUseRankingHdtDig(ctx context.Context, in *TelReq, out *RankingInfoRes) error
		AppList(ctx context.Context, in *IndexReq, out *AppListRes) error
		AppDetailInfo(ctx context.Context, in *AppDetailReq, out *AppDetailInfoRes) error
		GetMinePoolInfo(ctx context.Context, in *TelReq, out *MinePoolRes) error
		GetMinePoolTaskList(ctx context.Context, in *TokenReq, out *MinePoolTaskListRes) error
	}
	type UserServceRpc struct {
		userServceRpc
	}
	h := &userServceRpcHandler{hdlr}
	s.Handle(s.NewHandler(&UserServceRpc{h}, opts...))
}

type userServceRpcHandler struct {
	UserServceRpcHandler
}

func (h *userServceRpcHandler) Login(ctx context.Context, in *LoginReq, out *LoginRes) error {
	return h.UserServceRpcHandler.Login(ctx, in, out)
}

func (h *userServceRpcHandler) Register(ctx context.Context, in *RegisterReq, out *ReturnRes) error {
	return h.UserServceRpcHandler.Register(ctx, in, out)
}

func (h *userServceRpcHandler) ModifyPwdByTel(ctx context.Context, in *LoginReq, out *ReturnRes) error {
	return h.UserServceRpcHandler.ModifyPwdByTel(ctx, in, out)
}

func (h *userServceRpcHandler) AddQianXunCode(ctx context.Context, in *QianxunReq, out *ReturnRes) error {
	return h.UserServceRpcHandler.AddQianXunCode(ctx, in, out)
}

func (h *userServceRpcHandler) QianXunSnsVerify(ctx context.Context, in *QianxunReq, out *ReturnRes) error {
	return h.UserServceRpcHandler.QianXunSnsVerify(ctx, in, out)
}

func (h *userServceRpcHandler) SetUserToken(ctx context.Context, in *TokenReq, out *ReturnRes) error {
	return h.UserServceRpcHandler.SetUserToken(ctx, in, out)
}

func (h *userServceRpcHandler) GetUserToken(ctx context.Context, in *TelReq, out *TokenRes) error {
	return h.UserServceRpcHandler.GetUserToken(ctx, in, out)
}

func (h *userServceRpcHandler) GetUserRankingInfo(ctx context.Context, in *TelReq, out *RankingInfoRes) error {
	return h.UserServceRpcHandler.GetUserRankingInfo(ctx, in, out)
}

func (h *userServceRpcHandler) GetUseRankingHdtDig(ctx context.Context, in *TelReq, out *RankingInfoRes) error {
	return h.UserServceRpcHandler.GetUseRankingHdtDig(ctx, in, out)
}

func (h *userServceRpcHandler) AppList(ctx context.Context, in *IndexReq, out *AppListRes) error {
	return h.UserServceRpcHandler.AppList(ctx, in, out)
}

func (h *userServceRpcHandler) AppDetailInfo(ctx context.Context, in *AppDetailReq, out *AppDetailInfoRes) error {
	return h.UserServceRpcHandler.AppDetailInfo(ctx, in, out)
}

func (h *userServceRpcHandler) GetMinePoolInfo(ctx context.Context, in *TelReq, out *MinePoolRes) error {
	return h.UserServceRpcHandler.GetMinePoolInfo(ctx, in, out)
}

func (h *userServceRpcHandler) GetMinePoolTaskList(ctx context.Context, in *TokenReq, out *MinePoolTaskListRes) error {
	return h.UserServceRpcHandler.GetMinePoolTaskList(ctx, in, out)
}
