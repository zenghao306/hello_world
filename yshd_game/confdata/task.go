// Generated by github.com/davyxu/tabtoy
// Version: 2.7.5
// DO NOT EDIT!!
package confdata

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
)

// Defined in table: Globals
type TaskType int32

const (

	// 日常任务
	TaskType_daily TaskType = 0

	// 限时任务
	TaskType_limit TaskType = 1
)

// Defined in table: Globals
type TargetType int32

const (

	// 赢的局数
	TargetType_win TargetType = 0

	// 打赏
	TargetType_gift TargetType = 1
)

// Defined in table: Globals
type RewardType int32

const (

	// 金钱
	RewardType_money RewardType = 0

	// 经验
	RewardType_exp RewardType = 1
)

// Defined in table: Config
type Config struct {

	//Task
	Task []*TaskDefine
}

// Defined in table: Task
type RewardProp struct {

	// 金钱类型
	MoneyType int32

	// 数量
	Num int64
}

// Defined in table: Task
type TaskDefine struct {

	//唯一ID
	Id int64

	//任务名字
	Name string

	//任务类型
	Type TaskType

	//任务目标
	Target TargetType

	TargetParam int32

	//奖励1金钱
	Reward1 *RewardProp

	//奖励2经验
	Reward2 int64
}

// Config 访问接口
type ConfigTable struct {

	// 表格原始数据
	Config

	// 索引函数表
	indexFuncByName map[string][]func(*ConfigTable)

	// 清空函数表
	clearFuncByName map[string][]func(*ConfigTable)

	TaskById map[int64]*TaskDefine
}

// 从json文件加载
func (self *ConfigTable) Load(filename string) error {

	data, err := ioutil.ReadFile(filename)

	if err != nil {
		return err
	}

	// 清除
	for _, list := range self.clearFuncByName {
		for _, v := range list {
			v(self)
		}
	}

	err = json.Unmarshal(data, &self.Config)
	if err != nil {
		return err
	}

	// 生成索引
	for _, list := range self.indexFuncByName {
		for _, v := range list {
			v(self)
		}
	}

	return nil
}

// 注册外部索引入口, 索引回调, 清空回调
func (self *ConfigTable) RegisterIndexEntry(name string, indexCallback func(*ConfigTable), clearCallback func(*ConfigTable)) {

	indexList, _ := self.indexFuncByName[name]
	clearList, _ := self.clearFuncByName[name]

	if indexCallback != nil {
		indexList = append(indexList, indexCallback)
	}

	if clearCallback != nil {
		clearList = append(clearList, clearCallback)
	}

	self.indexFuncByName[name] = indexList
	self.clearFuncByName[name] = clearList
}

// 创建一个Config表读取实例
func NewConfigTable() *ConfigTable {
	return &ConfigTable{

		indexFuncByName: map[string][]func(*ConfigTable){

			"Task": {func(tab *ConfigTable) {

				// Task
				for _, def := range tab.Task {

					if _, ok := tab.TaskById[def.Id]; ok {
						panic(fmt.Sprintf("duplicate index in TaskById: %v", def.Id))
					}

					tab.TaskById[def.Id] = def

				}
			}},
		},

		clearFuncByName: map[string][]func(*ConfigTable){

			"Task": {func(tab *ConfigTable) {

				// Task

				tab.TaskById = make(map[int64]*TaskDefine)
			}},
		},

		TaskById: make(map[int64]*TaskDefine),
	}
}
